{"ast":null,"code":"var _jsxFileName = \"/Users/kylebuckner/workspace/nutshell-java-dalia/src/components/Events/EventForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { addEvent } from '../../modules/EventManager';\nimport \"./EventForm.css\"; //uses sessionstorage on Nutshell.js\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const EventForm = () => {\n  _s();\n\n  // State will contain both Event data as well as an isLoading flag.\n  // Define the initial state of the form inputs with useState()\n  const navigate = useNavigate();\n  const [appEvent, setEvent] = useState({\n    userId: 0,\n    title: \"\",\n    subject: \"\",\n    locations: \"\",\n    date: \"\",\n    time: \"\",\n    description: \"\",\n    dateTime: \"\"\n  });\n  const [isLoading, setIsLoading] = useState(false); // you will need the the `getAll` in the LocationsManager and AnimalManager to complete this section\n  // const [locations, setLocations] = useState([]);\n  // const [animal, setAnimal] = useState([]);\n  //placeholder: dont know hwat to do with this if anythng\n\n  const handleControlledInputChange = event => {\n    /* When changing a state object or array,\n    always create a copy, make changes, and then set state.*/\n    const newEvent = { ...appEvent\n    };\n    let selectedVal = event.target.value; // forms always provide values as strings. But we want to save the ids as numbers.\n\n    if (event.target.id.includes(\"Id\")) {\n      selectedVal = parseInt(selectedVal);\n    }\n    /* Event is an object with properties.\n    Set the property to the new value\n    using object bracket notation. */\n\n\n    newEvent[event.target.id] = selectedVal; // update state\n\n    setEvent(newEvent);\n  };\n\n  const handleClickSaveEvent = event => {\n    event.preventDefault(); //Prevents the browser from submitting the form\n\n    const user = JSON.parse(sessionStorage.getItem(\"nutshell_user\"));\n    const newEvent = { ...appEvent\n    };\n    newEvent.userId = user.id;\n    newEvent.dateTime = new Date().toLocaleString(); // setEvent(newEvent)\n    //invoke addEvent passing event as an argument.\n    //once complete, change the url and display the event list\n\n    addEvent(newEvent).then(() => navigate(\"/events\"));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"eventForm\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"eventForm_header\",\n        children: \"New Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"title\",\n            children: \"Title:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"title\",\n            onChange: handleControlledInputChange,\n            required: true,\n            autoFocus: true,\n            className: \"form-control\",\n            placeholder: \"New Year's Party\",\n            value: appEvent.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 6\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"subject\",\n            children: \"Subject\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"subject\",\n            onChange: handleControlledInputChange,\n            required: true,\n            autoFocus: true,\n            className: \"form-control\",\n            placeholder: \"Hoilday\",\n            value: appEvent.subject\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"locations\",\n            children: \"location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"locations\",\n            onChange: handleControlledInputChange,\n            required: true,\n            autoFocus: true,\n            className: \"form-control\",\n            placeholder: \"123 NSS st\",\n            value: appEvent.locations\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"date\",\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"date\",\n            onChange: handleControlledInputChange,\n            required: true,\n            autoFocus: true,\n            className: \"form-control\",\n            placeholder: \"2/2/22\",\n            value: appEvent.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"time\",\n            children: \"Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"time\",\n            onChange: handleControlledInputChange,\n            required: true,\n            autoFocus: true,\n            className: \"form-control\",\n            placeholder: \"2:22 pm\",\n            value: appEvent.time\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"text\",\n            children: \"Decription\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"description\",\n            onChange: handleControlledInputChange,\n            required: true,\n            autoFocus: true,\n            className: \"form-control\",\n            placeholder: \"Come have fun!\",\n            value: appEvent.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: handleClickSaveEvent,\n        children: \"Save Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(EventForm, \"8NG7Cqi1yKoNNgiOLF/b+62/9ak=\", false, function () {\n  return [useNavigate];\n});\n\n_c = EventForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventForm\");","map":{"version":3,"sources":["/Users/kylebuckner/workspace/nutshell-java-dalia/src/components/Events/EventForm.js"],"names":["React","useState","useEffect","useNavigate","addEvent","EventForm","navigate","appEvent","setEvent","userId","title","subject","locations","date","time","description","dateTime","isLoading","setIsLoading","handleControlledInputChange","event","newEvent","selectedVal","target","value","id","includes","parseInt","handleClickSaveEvent","preventDefault","user","JSON","parse","sessionStorage","getItem","Date","toLocaleString","then"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { addEvent } from '../../modules/EventManager';\nimport \"./EventForm.css\"\n\n//uses sessionstorage on Nutshell.js\n\nexport const EventForm = () => {\n\t// State will contain both Event data as well as an isLoading flag.\n\t// Define the initial state of the form inputs with useState()\n\n\t\n\n\t\n\n\n\tconst navigate = useNavigate();\n\n\n\tconst [appEvent, setEvent] = useState({\n\n        userId: 0,\n\t\ttitle: \"\",\n        subject: \"\",\n\t\tlocations: \"\",\n\t\tdate: \"\",\n\t\ttime: \"\",\n\t\tdescription: \"\",\n\t\tdateTime: \"\"\n\t});\n\n    const [isLoading, setIsLoading] = useState(false);\n\n    // you will need the the `getAll` in the LocationsManager and AnimalManager to complete this section\n\t// const [locations, setLocations] = useState([]);\n\t// const [animal, setAnimal] = useState([]);\n    //placeholder: dont know hwat to do with this if anythng\n\n    const handleControlledInputChange = (event) => {\n\t\t/* When changing a state object or array,\n\t\talways create a copy, make changes, and then set state.*/\n\t\tconst newEvent = { ...appEvent }\n\t\tlet selectedVal = event.target.value\n\t\t// forms always provide values as strings. But we want to save the ids as numbers.\n\t\tif (event.target.id.includes(\"Id\")) {\n\t\t\tselectedVal = parseInt(selectedVal)\n\t\t}\n\t\t/* Event is an object with properties.\n\t\tSet the property to the new value\n\t\tusing object bracket notation. */\n\t\tnewEvent[event.target.id] = selectedVal\n\t\t// update state\n\t\tsetEvent(newEvent)\n\t}\n\n    const handleClickSaveEvent = (event) => {\n\t\tevent.preventDefault() //Prevents the browser from submitting the form\n\n\t\tconst user = JSON.parse(sessionStorage.getItem(\"nutshell_user\"))\n\n\t\tconst newEvent = { ...appEvent }\n\t\tnewEvent.userId = user.id\n\t\tnewEvent.dateTime = new Date().toLocaleString();\n\t\t// setEvent(newEvent)\n\t\t//invoke addEvent passing event as an argument.\n\t\t//once complete, change the url and display the event list\n\t\taddEvent(newEvent)\n\t\t\t.then(() => navigate(\"/events\"))\n\t\t\n\t}\n\n\n    return (\n\t\t<>\n        <form className=\"eventForm\">\n    \n\t\t\t<h2 className=\"eventForm_header\">New Event</h2>\n\t\t\t<fieldset>\n\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t<label htmlFor=\"title\">Title:</label>\n\t\t\t\t\t<input type=\"text\" id=\"title\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"New Year's Party\" value={appEvent.title} />\n\t\t\t\t\t</div>\n\t\t\t\t\t</fieldset>\n\t\t\t<fieldset>\n\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t<label htmlFor=\"subject\">Subject</label>\n\t\t\t\t\t\t<input type=\"text\" id=\"subject\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"Hoilday\" value={appEvent.subject} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</fieldset>\n\t\t\t<fieldset>\n\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t<label htmlFor=\"locations\">location</label>\n\t\t\t\t\t\t<input type=\"text\" id=\"locations\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"123 NSS st\" value={appEvent.locations} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</fieldset>\n\t\t\t<fieldset>\n\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t<label htmlFor=\"date\">Date</label>\n\t\t\t\t\t\t<input type=\"text\" id=\"date\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"2/2/22\" value={appEvent.date} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</fieldset>\n\t\t\t<fieldset>\n\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t<label htmlFor=\"time\">Time</label>\n\t\t\t\t\t\t<input type=\"text\" id=\"time\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"2:22 pm\" value={appEvent.time} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</fieldset>\n\t\t\t<fieldset>\n\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t<label htmlFor=\"text\">Decription</label>\n\t\t\t\t\t\t<input type=\"text\" id=\"description\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"Come have fun!\" value={appEvent.description} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</fieldset>\n\t\t\t<button className=\"btn btn-primary\"\n\t\t\t\tonClick={handleClickSaveEvent}>\n\t\t\t\tSave Event\n\t\t\t</button>\n\t\t\n        </form>\n\t\t</>\n    )\n\n\n\n}"]},"metadata":{},"sourceType":"module"}