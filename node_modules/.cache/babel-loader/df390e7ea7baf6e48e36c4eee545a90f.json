{"ast":null,"code":"var _jsxFileName = \"/Users/kylebuckner/workspace/nutshell-java-dalia/src/components/article/ArticleForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { addArticle, getAllArticles } from '../../modules/ArticleManager';\nimport './ArticleForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ArticleForm = () => {\n  _s();\n\n  // State will contain both article data as well as an isLoading flag.\n  // Define the initial state of the form inputs with useState()\n  const [article, setArticle] = useState({\n    userId: 0,\n    title: \"\",\n    synopsis: \"\",\n    url: \"\",\n    dateTime: \"\"\n  });\n  const [isLoading, setIsLoading] = useState(false); // you will need the the `getAll` in the LocationsManager and CustomersManager to complete this section\n  // const [users, setUsers] = useState([]);\n\n  const navigate = useNavigate(); //when a field changes, update state. The return will re-render and display based on the values in state\n  // NOTE! What's happening in this function can be very difficult to grasp. Read it over many times and ask a lot questions about it.\n  //Controlled component\n\n  const handleControlledInputChange = event => {\n    /* When changing a state object or array,\n    always create a copy, make changes, and then set state.*/\n    const newArticle = { ...article\n    };\n    let selectedVal = event.target.value; // forms always provide values as strings. But we want to save the ids as numbers.\n\n    if (event.target.id.includes(\"Id\")) {\n      selectedVal = parseInt(selectedVal);\n    }\n    /* Article is an object with properties.\n    Set the property to the new value\n    using object bracket notation. */\n\n\n    newArticle[event.target.id] = selectedVal; // update state\n\n    setArticle(newArticle);\n  };\n\n  const handleClickSaveArticle = event => {\n    event.preventDefault(); //Prevents the browser from submitting the form\n\n    const user = JSON.parse(sessionStorage.getItem(\"nutshell_user\"));\n    const newArticle = { ...article\n    };\n    newArticle.userId = user.id;\n    newArticle.dateTime = new Date().toLocaleString();\n    addArticle(newArticle).then(() => navigate(\"/articles\"));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"articleForm\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"articleForm__title\",\n      children: \"New Article\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"Article Title:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"title\",\n          onChange: handleControlledInputChange,\n          required: true,\n          autoFocus: true,\n          className: \"form-control\",\n          placeholder: \"Enter title here\",\n          value: article.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"synopsis\",\n          children: \"Synopsis:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"synopsis\",\n          onChange: handleControlledInputChange,\n          required: true,\n          autoFocus: true,\n          className: \"form-control\",\n          placeholder: \"Enter description here\",\n          value: article.synopsis\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"url\",\n          children: \"URL:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"url\",\n          onChange: handleControlledInputChange,\n          required: true,\n          autoFocus: true,\n          className: \"form-control\",\n          placeholder: \"Enter url here\",\n          value: article.url\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: handleClickSaveArticle,\n      children: \"Save Article\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 3\n  }, this);\n};\n\n_s(ArticleForm, \"gPt+2zp6o/2uZ/AjZXaupG36Ku0=\", false, function () {\n  return [useNavigate];\n});\n\n_c = ArticleForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ArticleForm\");","map":{"version":3,"sources":["/Users/kylebuckner/workspace/nutshell-java-dalia/src/components/article/ArticleForm.js"],"names":["React","useState","useEffect","useNavigate","addArticle","getAllArticles","ArticleForm","article","setArticle","userId","title","synopsis","url","dateTime","isLoading","setIsLoading","navigate","handleControlledInputChange","event","newArticle","selectedVal","target","value","id","includes","parseInt","handleClickSaveArticle","preventDefault","user","JSON","parse","sessionStorage","getItem","Date","toLocaleString","then"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { addArticle, getAllArticles } from '../../modules/ArticleManager';\nimport './ArticleForm.css'\n\nexport const ArticleForm = () => {\n\t// State will contain both article data as well as an isLoading flag.\n\t// Define the initial state of the form inputs with useState()\n\n\tconst [article, setArticle] = useState({\n\t\tuserId: 0,\n    title: \"\",\n\t\tsynopsis: \"\",\n\t\turl: \"\",\n    dateTime: \"\"\n\t});\n\n\tconst [isLoading, setIsLoading] = useState(false);\n\n\t// you will need the the `getAll` in the LocationsManager and CustomersManager to complete this section\n\t// const [users, setUsers] = useState([]);\n\n\tconst navigate = useNavigate();\n\n\t//when a field changes, update state. The return will re-render and display based on the values in state\n\t// NOTE! What's happening in this function can be very difficult to grasp. Read it over many times and ask a lot questions about it.\n\t//Controlled component\n\n\tconst handleControlledInputChange = (event) => {\n\t\t/* When changing a state object or array,\n\t\talways create a copy, make changes, and then set state.*/\n\t\tconst newArticle = { ...article }\n\t\tlet selectedVal = event.target.value\n\t\t// forms always provide values as strings. But we want to save the ids as numbers.\n\t\tif (event.target.id.includes(\"Id\")) {\n\t\t\tselectedVal = parseInt(selectedVal)\n\t\t}\n\t\t/* Article is an object with properties.\n\t\tSet the property to the new value\n\t\tusing object bracket notation. */\n\t\tnewArticle[event.target.id] = selectedVal\n\t\t// update state\n\t\tsetArticle(newArticle)\n\t};\n\n\tconst handleClickSaveArticle = (event) => {\n    event.preventDefault() //Prevents the browser from submitting the form\n\n    const user = JSON.parse(sessionStorage.getItem(\"nutshell_user\"))\n\n    const newArticle = { ...article }\n    newArticle.userId = user.id\n\t\tnewArticle.dateTime = new Date().toLocaleString();\n\t\taddArticle(newArticle)\n\t\t.then(() => navigate(\"/articles\"))\n\t}\n\n\treturn (\n\t\t<form className=\"articleForm\">\n\t\t\t<h2 className=\"articleForm__title\">New Article</h2>\n\t\t\t<fieldset>\n\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t<label htmlFor=\"name\">Article Title:</label>\n\t\t\t\t\t<input type=\"text\" id=\"title\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"Enter title here\" value={article.title} />\n\t\t\t\t</div>\n\t\t\t</fieldset>\n      <fieldset>\n\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t<label htmlFor=\"synopsis\">Synopsis:</label>\n\t\t\t\t\t<input type=\"text\" id=\"synopsis\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"Enter description here\" value={article.synopsis} />\n\t\t\t\t</div>\n\t\t\t</fieldset>\n      <fieldset>\n\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t<label htmlFor=\"url\">URL:</label>\n\t\t\t\t\t<input type=\"text\" id=\"url\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"Enter url here\" value={article.url} />\n\t\t\t\t</div>\n\t\t\t</fieldset>\n      {/* <fieldset>\n\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t<label htmlFor=\"date\">Date:</label>\n\t\t\t\t\t<input type=\"text\" id=\"date\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"Enter date here\" value={article.date} />\n\t\t\t\t</div>\n\t\t\t</fieldset>\n      <fieldset>\n\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t<label htmlFor=\"time\">Time:</label>\n\t\t\t\t\t<input type=\"text\" id=\"time\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"Enter time here\" value={article.time} />\n\t\t\t\t</div>\n\t\t\t</fieldset> */}\n\t\t\t<button className=\"btn btn-primary\"\n\t\t\t\tonClick={handleClickSaveArticle}>\n\t\t\t\tSave Article\n          </button>\n\t\t</form>\n\t)\n};"]},"metadata":{},"sourceType":"module"}