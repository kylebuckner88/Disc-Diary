{"ast":null,"code":"var _jsxFileName = \"/Users/kylebuckner/workspace/nutshell-java-dalia/src/components/message/MessageForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { addMessage, getAllMessages } from '../../modules/MessageManager';\nimport { getAllFriends } from '../../modules/FriendManager';\nimport './MessageForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MessageForm = () => {\n  _s();\n\n  // State will contain both message data as well as an isLoading flag.\n  // Define the initial state of the form inputs with useState()\n  const [message, setMessage] = useState({\n    userId: 0,\n    recipientId: 0,\n    subject: \"\",\n    description: \"\",\n    dateTime: \"\"\n  });\n  const [isLoading, setIsLoading] = useState(false); // you will need the the `getAll` in the FriendsManager to complete this section\n\n  const [friends, setFriends] = useState([]);\n  const navigate = useNavigate(); //when a field changes, update state. The return will re-render and display based on the values in state\n  // NOTE! What's happening in this function can be very difficult to grasp. Read it over many times and ask a lot questions about it.\n  //Controlled component\n\n  const handleControlledInputChange = event => {\n    /* When changing a state object or array,\n    always create a copy, make changes, and then set state.*/\n    const newMessage = { ...message\n    };\n    let selectedVal = event.target.value; // forms always provide values as strings. But we want to save the ids as numbers.\n\n    if (event.target.id.includes(\"Id\")) {\n      selectedVal = parseInt(selectedVal);\n    }\n    /* Message is an object with properties.\n    Set the property to the new value\n    using object bracket notation. */\n\n\n    newMessage[event.target.id] = selectedVal; // update state\n\n    setMessage(newMessage);\n  }; //   useEffect(() => {\n  // \t\t//load friend data and setState\n  //       getAllFriends().then(setFriends)\n  // \t}, []);\n\n\n  const handleClickSaveMessage = event => {\n    event.preventDefault(); //Prevents the browser from submitting the form\n\n    const user = JSON.parse(sessionStorage.getItem(\"nutshell_user\"));\n    const recipientId = message.recipientId;\n\n    if (recipientId === 0) {\n      window.alert(\"Please select a recipient\");\n    } else {\n      const newMessage = { ...message\n      };\n      newMessage.userId = user.id;\n      newMessage.dateTime = new Date().toLocaleString();\n      addMessage(newMessage).then(() => navigate(\"/messages\"));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"messageForm\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"messageForm__title\",\n      children: \"New Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"recipientId\",\n          children: \"Recipient: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: message.recipientId,\n          name: \"recipient\",\n          id: \"recipientId\",\n          onChange: handleControlledInputChange,\n          className: \"form-control\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"0\",\n            children: \"Select a recipient\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 8\n          }, this), friends.map(r => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: r.id,\n            children: r.name\n          }, r.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 9\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"subject\",\n          children: \"Message Subject:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"subject\",\n          onChange: handleControlledInputChange,\n          required: true,\n          autoFocus: true,\n          className: \"form-control\",\n          placeholder: \"Enter subject here\",\n          value: message.subject\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"body\",\n          children: \"Body:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"body\",\n          onChange: handleControlledInputChange,\n          required: true,\n          autoFocus: true,\n          className: \"form-control\",\n          placeholder: \"Enter message here\",\n          value: message.body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: handleClickSaveMessage,\n      children: \"Save Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 4\n  }, this);\n};\n\n_s(MessageForm, \"a2fBMEI9RyKEmzESlQfzf3mPg5Q=\", false, function () {\n  return [useNavigate];\n});\n\n_c = MessageForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"MessageForm\");","map":{"version":3,"sources":["/Users/kylebuckner/workspace/nutshell-java-dalia/src/components/message/MessageForm.js"],"names":["React","useState","useEffect","useNavigate","addMessage","getAllMessages","getAllFriends","MessageForm","message","setMessage","userId","recipientId","subject","description","dateTime","isLoading","setIsLoading","friends","setFriends","navigate","handleControlledInputChange","event","newMessage","selectedVal","target","value","id","includes","parseInt","handleClickSaveMessage","preventDefault","user","JSON","parse","sessionStorage","getItem","window","alert","Date","toLocaleString","then","map","r","name","body"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { addMessage, getAllMessages } from '../../modules/MessageManager';\nimport { getAllFriends } from '../../modules/FriendManager';\nimport './MessageForm.css'\n\nexport const MessageForm = () => {\n\t// State will contain both message data as well as an isLoading flag.\n\t// Define the initial state of the form inputs with useState()\n\n\tconst [message, setMessage] = useState({\n\t\tuserId: 0,\n\t\trecipientId: 0,\n\t\tsubject: \"\",\n\t\tdescription: \"\",\n    \tdateTime: \"\"\n\t});\n\n\tconst [isLoading, setIsLoading] = useState(false);\n\n\t// you will need the the `getAll` in the FriendsManager to complete this section\n\tconst [friends, setFriends] = useState([]);\n\n\tconst navigate = useNavigate();\n\n\t//when a field changes, update state. The return will re-render and display based on the values in state\n\t// NOTE! What's happening in this function can be very difficult to grasp. Read it over many times and ask a lot questions about it.\n\t//Controlled component\n\n\tconst handleControlledInputChange = (event) => {\n\t\t/* When changing a state object or array,\n\t\talways create a copy, make changes, and then set state.*/\n\t\tconst newMessage = { ...message }\n\t\tlet selectedVal = event.target.value\n\t\t// forms always provide values as strings. But we want to save the ids as numbers.\n\t\tif (event.target.id.includes(\"Id\")) {\n\t\t\tselectedVal = parseInt(selectedVal)\n\t\t}\n\t\t/* Message is an object with properties.\n\t\tSet the property to the new value\n\t\tusing object bracket notation. */\n\t\tnewMessage[event.target.id] = selectedVal\n\t\t// update state\n\t\tsetMessage(newMessage)\n\t}\n\n\n//   useEffect(() => {\n// \t\t//load friend data and setState\n//       getAllFriends().then(setFriends)\n// \t}, []);\n\n\n\tconst handleClickSaveMessage = (event) => {\n\t\tevent.preventDefault() //Prevents the browser from submitting the form\n\n\t\tconst user = JSON.parse(sessionStorage.getItem(\"nutshell_user\"))\n\n\t\tconst recipientId = message.recipientId\n    \n\t\tif (recipientId === 0) {\n\t\t\t\twindow.alert(\"Please select a recipient\")\n\t\t\t} else {\n\n\t\t\tconst newMessage = { ...message }\n\t\t\tnewMessage.userId = user.id\n\t\t\t\tnewMessage.dateTime = new Date().toLocaleString();\n\t\t\t\taddMessage(newMessage)\n\t\t\t\t.then(() => navigate(\"/messages\"))\n\t\t}}\n\n\t\treturn (\n\t\t\t<form className=\"messageForm\">\n\t\t\t\t<h2 className=\"messageForm__title\">New Message</h2>\n\t\t<fieldset>\n\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t<label htmlFor=\"recipientId\">Recipient: </label>\n\t\t\t\t\t\t<select value={message.recipientId} name=\"recipient\" id=\"recipientId\" onChange={handleControlledInputChange} className=\"form-control\" >\n\t\t\t\t\t\t\t<option value=\"0\">Select a recipient</option>\n\t\t\t\t\t\t\t{friends.map(r => (\n\t\t\t\t\t\t\t\t<option key={r.id} value={r.id}>\n\t\t\t\t\t\t\t\t\t{r.name}\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t</fieldset>\n\t\t\t\t<fieldset>\n\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t<label htmlFor=\"subject\">Message Subject:</label>\n\t\t\t\t\t\t<input type=\"text\" id=\"subject\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"Enter subject here\" value={message.subject} />\n\t\t\t\t\t</div>\n\t\t\t\t</fieldset>\n\t\t<fieldset>\n\t\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t\t<label htmlFor=\"body\">Body:</label>\n\t\t\t\t\t\t<input type=\"text\" id=\"body\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"Enter message here\" value={message.body} />\n\t\t\t\t\t</div>\n\t\t\t\t</fieldset>\n\t\t\t\t<button className=\"btn btn-primary\"\n\t\t\t\t\tonClick={handleClickSaveMessage}>\n\t\t\t\t\tSave Message\n\t\t\t</button>\n\t\t\t</form>\n\t\t)\n\t\n};"]},"metadata":{},"sourceType":"module"}