{"ast":null,"code":"var _jsxFileName = \"/Users/kylebuckner/workspace/nutshell-java-dalia/src/components/Tasks/TaskForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './Taskform.css';\nimport { addTask } from '../../modules/TaskManager'; // import { getAllLocations } from '../../modules/LocationManager';\n// import { getAllCustomers } from '../../modules/CustomerManager';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TaskForm = () => {\n  _s();\n\n  // State will contain both task data as well as an isLoading flag.\n  // Define the initial state of the form inputs with useState()\n  const [task, setTask] = useState({\n    goal: \"\",\n    location: \"\",\n    description: \"\",\n    timeframe: \"\"\n  });\n  const [isLoading, setIsLoading] = useState(false); // imported from old code, may not need\n  // const [locations, setLocations] = useState([]);\n  // const [customers, setCustomers] = useState([]);\n\n  const navigate = useNavigate(); //when a field changes, update state. The return will re-render and display based on the values in state\n  // NOTE! What's happening in this function can be very difficult to grasp. Read it over many times and ask a lot questions about it.\n  //Controlled component\n\n  const handleControlledInputChange = event => {\n    /* When changing a state object or array,\n    always create a copy, make changes, and then set state.*/\n    const newTask = { ...task\n    };\n    let selectedVal = event.target.value; // forms always provide values as strings. But we want to save the ids as numbers.\n\n    if (event.target.id.includes(\"Id\")) {\n      selectedVal = parseInt(selectedVal);\n    }\n    /* task is an object with properties.\n    Set the property to the new value\n    using object bracket notation. */\n\n\n    newTask[event.target.id] = selectedVal; // update state\n\n    setTask(newTask);\n  }; //Unsure if this code is needed\n  // useEffect(() => {\n  // \t//load location data and setState\n  //     getAllLocations().then(setLocations)\n  // }, []);\n  //  useEffect(() => {\n  // \t//load customer data and setState\n  //     getAllCustomers().then(setCustomers)\n  // }, []);\n\n\n  const handleClickSaveTask = event => {\n    event.preventDefault(); //Prevents the browser from submitting the form\n    //if else statment may be unnessessary \n    // const locationId = task.locationId\n    // const customerId = task.customerId\n    // if (locationId === 0 || customerId === 0) {\n    // \twindow.alert(\"Please select a location and a customer\")\n    // } else \n\n    {\n      //invoke addtask passing task as an argument.\n      //once complete, change the url and display the task list\n      addTask(task).then(() => navigate(\"/tasks\"));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"taskForm\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"taskForm__title\",\n      children: \"New Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"goal\",\n          children: \"Task Goal:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"goal\",\n          onChange: handleControlledInputChange,\n          required: true,\n          autoFocus: true,\n          className: \"form-control\",\n          placeholder: \"task goal\",\n          value: task.goal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"location\",\n          children: \"Task Location:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"location\",\n          onChange: handleControlledInputChange,\n          required: true,\n          autoFocus: true,\n          className: \"form-control\",\n          placeholder: \"task location\",\n          value: task.location\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"location\",\n          children: \"Task Description: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"description\",\n          onChange: handleControlledInputChange,\n          required: true,\n          autoFocus: true,\n          className: \"form-control\",\n          placeholder: \"task description\",\n          value: task.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"customerId\",\n          children: \"Task Timeframe: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"timeframe\",\n          onChange: handleControlledInputChange,\n          required: true,\n          autoFocus: true,\n          className: \"form-control\",\n          placeholder: \"task timeframe\",\n          value: task.timeframe\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: handleClickSaveTask,\n      children: \"Save task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 3\n  }, this);\n};\n\n_s(TaskForm, \"0c/TC0DerK2zc4AZUJnlPEscNkQ=\", false, function () {\n  return [useNavigate];\n});\n\n_c = TaskForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskForm\");","map":{"version":3,"sources":["/Users/kylebuckner/workspace/nutshell-java-dalia/src/components/Tasks/TaskForm.js"],"names":["React","useState","useNavigate","addTask","TaskForm","task","setTask","goal","location","description","timeframe","isLoading","setIsLoading","navigate","handleControlledInputChange","event","newTask","selectedVal","target","value","id","includes","parseInt","handleClickSaveTask","preventDefault","then"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './Taskform.css'\nimport { addTask } from '../../modules/TaskManager';\n\n// import { getAllLocations } from '../../modules/LocationManager';\n// import { getAllCustomers } from '../../modules/CustomerManager';\n\nexport const TaskForm = () => {\n\t// State will contain both task data as well as an isLoading flag.\n\t// Define the initial state of the form inputs with useState()\n\n\tconst [task, setTask] = useState({\n\t\tgoal: \"\",\n\t\tlocation: \"\",\n\t\tdescription: \"\",\n\t\ttimeframe: \"\"\n\t});\n\n\tconst [isLoading, setIsLoading] = useState(false);\n\n\t// imported from old code, may not need\n\t// const [locations, setLocations] = useState([]);\n\t// const [customers, setCustomers] = useState([]);\n\n\tconst navigate = useNavigate();\n\n\t//when a field changes, update state. The return will re-render and display based on the values in state\n\t// NOTE! What's happening in this function can be very difficult to grasp. Read it over many times and ask a lot questions about it.\n\t//Controlled component\n\n\tconst handleControlledInputChange = (event) => {\n\t\t/* When changing a state object or array,\n\t\talways create a copy, make changes, and then set state.*/\n\t\tconst newTask = { ...task }\n\t\tlet selectedVal = event.target.value\n\t\t// forms always provide values as strings. But we want to save the ids as numbers.\n\t\tif (event.target.id.includes(\"Id\")) {\n\t\t\tselectedVal = parseInt(selectedVal)\n\t\t}\n\t\t/* task is an object with properties.\n\t\tSet the property to the new value\n\t\tusing object bracket notation. */\n\t\tnewTask[event.target.id] = selectedVal\n\t\t// update state\n\t\tsetTask(newTask)\n\t}\n\n\t//Unsure if this code is needed\n    // useEffect(() => {\n\t// \t//load location data and setState\n    //     getAllLocations().then(setLocations)\n\t// }, []);\n\n    //  useEffect(() => {\n\t// \t//load customer data and setState\n    //     getAllCustomers().then(setCustomers)\n\t// }, []);\n\n\n\tconst handleClickSaveTask = (event) => {\n\t\tevent.preventDefault() //Prevents the browser from submitting the form\n\t\t//if else statment may be unnessessary \n\t\t// const locationId = task.locationId\n\t\t// const customerId = task.customerId\n\n\t\t// if (locationId === 0 || customerId === 0) {\n\t\t// \twindow.alert(\"Please select a location and a customer\")\n\t\t// } else \n\t\t{\n\t\t\t//invoke addtask passing task as an argument.\n\t\t\t//once complete, change the url and display the task list\n\t\t\taddTask(task)\n\t\t\t\t.then(() => navigate(\"/tasks\"))\n\t\t}\n\t}\n\n\treturn (\n\t\t<form className=\"taskForm\">\n\t\t\t<h2 className=\"taskForm__title\">New Task</h2>\n\t\t\t<fieldset>\n\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t<label htmlFor=\"goal\">Task Goal:</label>\n\t\t\t\t\t<input type=\"text\" id=\"goal\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"task goal\" value={task.goal} />\n\t\t\t\t</div>\n\t\t\t</fieldset>\n\t\t\t<fieldset>\n\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t<label htmlFor=\"location\">Task Location:</label>\n\t\t\t\t\t<input type=\"text\" id=\"location\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"task location\" value={task.location} />\n\t\t\t\t</div>\n\t\t\t</fieldset>\n\t\t\t<fieldset>\n\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t<label htmlFor=\"location\">Task Description: </label>\n\t\t\t\t\t<input type=\"text\" id=\"description\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"task description\" value={task.description}/>\n\t\t\t\t</div>\n\t\t\t</fieldset>\n\t\t\t<fieldset>\n\t\t\t\t<div className=\"form-group\">\n\t\t\t\t\t<label htmlFor=\"customerId\">Task Timeframe: </label>\n\t\t\t\t\t<input type=\"text\" id=\"timeframe\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"task timeframe\" value={task.timeframe}/>\n\t\t\t\t</div>\n\t\t\t</fieldset>\n\t\t\t<button className=\"btn btn-primary\"\n\t\t\t\tonClick={handleClickSaveTask}>\n\t\t\t\tSave task\n          </button>\n\t\t</form>\n\t)\n};\n"]},"metadata":{},"sourceType":"module"}